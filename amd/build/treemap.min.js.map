{"version":3,"file":"treemap.min.js","sources":["../src/treemap.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @copyright University of Technology Graz\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/* eslint no-eval: 0 */\n/* eslint no-bitwise: 0 */\n\n// TODO\n// zoomed text jammed when going back after zoomed whil isZoomedIn\n\ndefine(\n  [\n    \"jquery\",\n    \"mod_learninggoalwidget/controller\",\n    \"mod_learninggoalwidget/treemap_module\",\n    \"core/config\"\n  ], function (\n    $,\n    Controller,\n    Treemap,\n    Configuration\n  ) {\n\n  /**\n   * Intialise the treemap widget.\n   * @param {*} treemapId The treemap ID\n   * @param {*} userId The user ID\n   * @param {*} courseId The course ID\n   * @param {*} courseModuleId The course module ID\n   * @param {*} instanceId The course module instance ID\n   * @param {*} treemapAccessibilityText The accessibility text\n   */\n  var renderTreemap = function (treemapId, userId, courseId, courseModuleId, instanceId, treemapAccessibilityText) {\n\n    // console.log(\"mod_learninggoalwidget.treemap> *********** Render Treemap ******************\");\n\n    require.config({\n      paths: {\n        d3v7: Configuration.wwwroot + \"/mod/learninggoalwidget/js/d3.v7.min\"\n      }\n    });\n\n    // request learning goals taxonomy\n    Controller.getLearningGoals({ courseid: courseId, userid: userId, coursemoduleid: courseModuleId, instanceid: instanceId })\n      .then(\n        function (jsonLearningGoals) {\n\n          // console.log(\"mod_learninggoalwidget.treemap> taxonomy loaded\");\n          // console.log(jsonLearningGoals);\n\n          var taxonomy = JSON.parse(jsonLearningGoals);\n\n          // console.log(\"mod_learninggoalwidget.treemap> loaded taxonomy\");\n          // console.log(\"mod_learninggoalwidget.treemap> render widget for widget id: \");\n          // console.log(treemapId);\n          // console.log(taxonomy);\n\n          if (taxonomy.children.length > 0) {\n            renderTreemapView(taxonomy, treemapId, treemapAccessibilityText, true);\n          }\n\n        }\n      )\n      .catch(function () {\n        //console.log(\"exception happened here\");\n        //console.log(e);\n      });\n\n  };\n\n  /**\n   * Render the treemap.\n   * @param {*} taxonomy The learning goal taxonomy\n   * @param {*} treemapId The treemap ID\n   * @param {*} treemapAccessibilityText The accessibility text\n   * @param {*} showConfirmation True if users should confirm progress value changes\n   */\n  var renderTreemapView = function (taxonomy, treemapId, treemapAccessibilityText, showConfirmation) {\n    require([\"d3v7\"], function (d3) {\n      Treemap.setupTreemap(taxonomy, d3, treemapId, treemapAccessibilityText, showConfirmation, (map, obj, progress) => {\n        SaveProgress(\n          getTreemapId(map),\n          getCourseId(map),\n          getCourseModuleId(map),\n          getInstanceId(map),\n          getUserId(map),\n          obj.parent.data.topicid,\n          obj.data.goalid,\n          obj.data.name,\n          progress);\n      });\n      Treemap.setupSvg();\n    });\n  };\n\n  /**\n   * Update the users progress.\n   * @param {*} treemapId The treemap ID\n   * @param {*} courseId The course ID\n   * @param {*} courseModuleId The course module ID\n   * @param {*} instanceId The course module instance ID\n   * @param {*} userId The user ID\n   * @param {*} topicId The topic ID\n   * @param {*} goalId The goal ID\n   * @param {*} goalName The name of the goal\n   * @param {*} goalProgressValue The user progress\n   */\n  var SaveProgress = function (treemapId, courseId, courseModuleId, instanceId, userId, topicId,\n    goalId, goalName, goalProgressValue) {\n\n    // learninggoals webservice: save the learning goal progress for a learning goal\n    Controller.updateUserProgress(\n      {\n        courseid: courseId,\n        coursemoduleid: courseModuleId,\n        instanceid: instanceId,\n        userid: userId,\n        topicid: topicId,\n        goalid: goalId,\n        progress: goalProgressValue\n      }\n    )\n      .then(\n        function (taxonomy) {\n          //console.log(\"Widget> progress saved successfully\");\n          let loadedTaxonomy = JSON.parse(taxonomy);\n          if (loadedTaxonomy.children.length > 0) {\n            // console.log(\"mod_learninggoalwidget.sunburst> send update progress event\");\n            const updateLearningGoalProgressEvent = new CustomEvent('update_learning_goal_progress', {\n              bubbles: true,\n              detail: {\n                sender: \"treemap\",\n                taxonomy: loadedTaxonomy,\n                treemapId: treemapId\n              }\n            });\n\n            $('#' + treemapId)[0].dispatchEvent(updateLearningGoalProgressEvent);\n          }\n        }\n      )\n      .catch(Notification.exception);\n\n    // log save progress event\n    let learningGoalEvent = CreateLearningGoalEvent(\"preparationSaveProgress\", courseId, courseModuleId, instanceId, userId);\n    let eventGoalParam = new Object();\n    eventGoalParam.name = \"goalname\";\n    eventGoalParam.value = goalName;\n    let eventGoalProgressParam = new Object();\n    eventGoalProgressParam.name = \"goalprogress\";\n    eventGoalProgressParam.value = goalProgressValue;\n    learningGoalEvent.push(eventGoalParam);\n    learningGoalEvent.push(eventGoalProgressParam);\n    LogLearningGoalEvent(courseId, courseModuleId, instanceId, userId, learningGoalEvent);\n  };\n\n  /**\n   * Create learning goal event parameters\n   * @param {*} eventName The name of the event for example preparationSaveProgress\n   * @param {*} courseId The course ID\n   * @param {*} courseModuleId The course module ID\n   * @param {*} instanceId The course module instance ID\n   * @param {*} userId The user ID\n   * @returns The array of learning goal event parameters\n   */\n  var CreateLearningGoalEvent = function (eventName, courseId, courseModuleId, instanceId, userId) {\n\n    let eventParam = new Object();\n    eventParam.name = \"eventname\";\n    eventParam.value = eventName;\n\n    let eventCourseParam = new Object();\n    eventCourseParam.name = \"courseid\";\n    eventCourseParam.value = courseId;\n\n    let eventCourseModuleParam = new Object();\n    eventCourseModuleParam.name = \"coursemoduleid\";\n    eventCourseModuleParam.value = courseModuleId;\n\n    let eventInstanceParam = new Object();\n    eventInstanceParam.name = \"instanceid\";\n    eventInstanceParam.value = instanceId;\n\n    let eventUserParam = new Object();\n    eventUserParam.name = \"userid\";\n    eventUserParam.value = userId;\n\n    let timestampParam = new Object();\n    timestampParam.name = \"timestamp\";\n    timestampParam.value = Math.trunc(new Date().getTime() / 1000);\n\n    return [eventParam, eventCourseParam, eventCourseModuleParam, eventInstanceParam, eventUserParam, timestampParam];\n  };\n\n  /**\n   * Logs learning goal events into moodles standard log store\n   * @param {*} courseId The course ID\n   * @param {*} courseModuleId The course module ID\n   * @param {*} instanceId The course module instance ID\n   * @param {*} userId The user ID\n   * @param {*} eventParams The learning goal event parameters\n   */\n  var LogLearningGoalEvent = function (courseId, courseModuleId, instanceId, userId, eventParams) {\n    Controller.logEvent(\n      {\n        courseid: courseId,\n        coursemoduleid: courseModuleId,\n        instanceid: instanceId,\n        userid: userId,\n        eventparams: eventParams\n      }\n    )\n      .then(\n        function () {\n          // console.log(\"Widget> event logged\");\n        }\n      )\n      .catch(Notification.exception);\n  };\n\n  /**\n   *\n   * @param {*} element The learning goal widget element\n   * @returns The treemap instance ID\n   */\n  var getTreemapId = function (element) {\n    let learningGoalWidgetElement = $(element).closest('div.telm-learninggoals-widget');\n    return $(learningGoalWidgetElement).data(\"treemap-id\");\n  };\n\n  /**\n   *\n   * @param {*} element The learning goal widget element\n   * @returns The course ID\n   */\n  var getCourseId = function (element) {\n    let learningGoalWidgetElement = $(element).closest('div.telm-learninggoals-widget');\n    return $(learningGoalWidgetElement).data(\"course-id\");\n  };\n\n  /**\n   *\n   * @param {*} element The learning goal widget element\n   * @returns The course module ID\n   */\n  var getCourseModuleId = function (element) {\n    let learningGoalWidgetElement = $(element).closest('div.telm-learninggoals-widget');\n    return $(learningGoalWidgetElement).data(\"coursemodule-id\");\n  };\n\n  /**\n   *\n   * @param {*} element The learning goal widget element\n   * @returns The course module instance ID\n   */\n  var getInstanceId = function (element) {\n    let learningGoalWidgetElement = $(element).closest('div.telm-learninggoals-widget');\n    return $(learningGoalWidgetElement).data(\"instance-id\");\n  };\n\n  /**\n   *\n   * @param {*} element The learning goal widget element\n   * @returns The user ID\n   */\n  var getUserId = function (element) {\n    let learningGoalWidgetElement = $(element).closest('div.telm-learninggoals-widget');\n    return $(learningGoalWidgetElement).data(\"user-id\");\n  };\n\n  return {\n    renderTreemap: renderTreemap,\n    renderTreemapView: renderTreemapView\n  };\n});\n\n"],"names":["define","$","Controller","Treemap","Configuration","renderTreemapView","taxonomy","treemapId","treemapAccessibilityText","showConfirmation","require","d3","setupTreemap","map","obj","progress","SaveProgress","getTreemapId","getCourseId","getCourseModuleId","getInstanceId","getUserId","parent","data","topicid","goalid","name","setupSvg","courseId","courseModuleId","instanceId","userId","topicId","goalId","goalName","goalProgressValue","updateUserProgress","courseid","coursemoduleid","instanceid","userid","then","loadedTaxonomy","JSON","parse","children","length","updateLearningGoalProgressEvent","CustomEvent","bubbles","detail","sender","dispatchEvent","catch","Notification","exception","learningGoalEvent","CreateLearningGoalEvent","eventGoalParam","Object","value","eventGoalProgressParam","push","LogLearningGoalEvent","eventName","eventParam","eventCourseParam","eventCourseModuleParam","eventInstanceParam","eventUserParam","timestampParam","Math","trunc","Date","getTime","eventParams","logEvent","eventparams","element","learningGoalWidgetElement","closest","renderTreemap","config","paths","d3v7","wwwroot","getLearningGoals","jsonLearningGoals"],"mappings":"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"}